#lang racket/base
(require  racket/list racket/set)
(provide pinkfishx)

(define pinkfish-table
  (hasheq
   'BLACK "30"
   'B_BLACK "40"
   'RED "31"
   'B_RED "41"
   'GREEN "32"
   'B_GREEN "42"
   'YELLOW "33"
   'ORANGE "33"
   'B_YELLOW "43"
   'B_ORANGE "43"
   'BLUE "34"
   'B_BLUE "44"
   'MAGENTA "35"
   'B_MAGENTA "45"
   'CYAN "46"
   'B_CYAN "47"
   'WHITE "37"
   'B_WHITE "47"
   'BOLD "1"
   'RESET "0"
   'REVERSE "7"
   'UNDERLINE "4"
   'ITALIC "3"
   'FLASH "5"))


(define xterm->ansi/table
 '#(("22;30" . "40")
   ("22;31" . "41")
   ("22;32" . "42")
   ("22;33" . "43")
   ("22;34" . "44")
   ("22;35" . "45")
   ("22;36" . "46")
   ("22;37" . "47")
   ("1;30" . "40")
   ("1;31" . "41")
   ("1;32" . "42")
   ("1;33" . "43")
   ("1;34" . "44")
   ("1;35" . "45")
   ("1;36" . "46")
   ("1;37" . "47")
   ("22;30" . "40")
   ("22;34" . "44")
   ("22;34" . "44")
   ("22;34" . "44")
   ("22;34" . "44")
   ("22;34" . "44")
   ("22;30" . "40")
   ("1;30" . "40")
   ("22;34" . "44")
   ("22;34" . "44")
   ("1;34" . "44")
   ("1;34" . "44")
   ("22;32" . "42")
   ("22;32" . "42")
   ("22;36" . "46")
   ("22;36" . "46")
   ("22;36" . "46")
   ("1;34" . "44")
   ("22;32" . "42")
   ("22;32" . "42")
   ("22;36" . "46")
   ("22;36" . "46")
   ("22;36" . "46")
   ("22;36" . "46")
   ("22;32" . "42")
   ("1;32" . "42")
   ("22;36" . "46")
   ("22;36" . "46")
   ("1;36" . "46")
   ("1;36" . "46")
   ("1;32" . "42")
   ("1;32" . "42")
   ("1;36" . "46")
   ("1;36" . "46")
   ("1;36" . "46")
   ("1;36" . "46")
   ("22;31" . "41")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;34" . "44")
   ("22;34" . "44")
   ("22;34" . "44")
   ("22;33" . "40")
   ("1;30" . "40")
   ("1;30" . "44")
   ("1;30" . "44")
   ("1;34" . "44")
   ("1;34" . "44")
   ("22;32" . "42")
   ("1;30" . "42")
   ("1;30" . "46")
   ("22;36" . "46")
   ("1;34" . "46")
   ("1;34" . "46")
   ("22;32" . "42")
   ("22;32" . "42")
   ("22;36" . "46")
   ("22;36" . "46")
   ("22;36" . "46")
   ("1;34" . "46")
   ("1;32" . "42")
   ("1;32" . "42")
   ("1;32" . "42")
   ("1;32" . "42")
   ("1;36" . "46")
   ("1;36" . "46")
   ("1;32" . "42")
   ("1;32" . "42")
   ("1;32" . "42")
   ("1;32" . "46")
   ("1;36" . "46")
   ("1;36" . "46")
   ("22;31" . "41")
   ("22;31" . "41")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("1;38" . "43")
   ("1;38" . "41")
   ("1;38" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;33" . "43")
   ("22;33" . "43")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("1;34" . "47")
   ("22;33" . "43")
   ("22;33" . "43")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("1;32" . "43")
   ("1;32" . "43")
   ("1;32" . "47")
   ("22;37" . "47")
   ("1;36" . "47")
   ("1;36" . "47")
   ("1;32" . "43")
   ("1;32" . "43")
   ("1;32" . "47")
   ("1;32" . "47")
   ("1;36" . "47")
   ("1;36" . "47")
   ("22;31" . "41")
   ("22;31" . "41")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;31" . "41")
   ("22;31" . "41")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("1;34" . "45")
   ("22;33" . "43")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("1;34" . "47")
   ("22;33" . "43")
   ("22;33" . "43")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;33" . "43")
   ("22;33" . "43")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("1;36" . "47")
   ("1;32" . "43")
   ("1;32" . "47")
   ("1;32" . "47")
   ("1;32" . "47")
   ("1;36" . "47")
   ("1;36" . "47")
   ("22;31" . "41")
   ("1;31" . "41")
   ("22;35" . "45")
   ("22;35" . "45")
   ("22;35" . "45")
   ("1;35" . "45")
   ("1;31" . "41")
   ("1;31" . "41")
   ("1;31" . "45")
   ("1;31" . "45")
   ("1;35" . "45")
   ("1;35" . "45")
   ("1;31" . "43")
   ("1;31" . "43")
   ("1;31" . "47")
   ("22;37" . "47")
   ("1;35" . "47")
   ("1;35" . "47")
   ("22;33" . "43")
   ("22;33" . "43")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("1;35" . "47")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;31" . "41")
   ("1;31" . "41")
   ("1;31" . "41")
   ("1;31" . "45")
   ("1;35" . "45")
   ("1;35" . "45")
   ("1;31" . "41")
   ("1;31" . "41")
   ("1;31" . "41")
   ("1;31" . "45")
   ("1;35" . "45")
   ("1;35" . "45")
   ("1;31" . "43")
   ("1;31" . "43")
   ("1;31" . "47")
   ("1;31" . "47")
   ("1;35" . "47")
   ("1;35" . "47")
   ("1;33" . "43")
   ("1;31" . "47")
   ("1;31" . "47")
   ("1;31" . "47")
   ("1;35" . "47")
   ("1;35" . "47")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;33" . "47")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;33" . "43")
   ("1;37" . "47")
   ("1;37" . "47")
   ("22;30" . "40")
   ("22;30" . "40")
   ("22;30" . "40")
   ("1;30" . "40")
   ("1;30" . "40")
   ("1;30" . "47")
   ("1;30" . "47")
   ("1;30" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("22;37" . "47")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;37" . "47")
   ("1;37" . "47")))
     
     ;;; etc
(define (x256->ansi-color i bg?)
  ((if bg? cdr car) (vector-ref xterm->ansi/table (string->number i))))
         
  
  
(define (string->ansi-code s options)
  (define pinkfish-code (hash-ref pinkfish-table (string->symbol (string-upcase s)) (λ () #f)))
  (define xterm-code (regexp-match #px"(B\\_)?XTERM;(\\d+)" s))
  (cond [pinkfish-code (and (set-member?  options 'color) pinkfish-code)]
        [(and xterm-code (set-member? options '256-color))
         (string-append (if (second xterm-code) "48;" "38;")
                        "5;"
                        (third xterm-code))]
        [(and xterm-code (set-member?  options 'color))
         (x256->ansi-color (third xterm-code) (second xterm-code))]
        [else #f]))

        
  
  
(define pinkfish-regexp
  #px"%\\^([^\\^%]*)%\\^")

(define (pinkfishx s options)
  (regexp-replace* pinkfish-regexp s
                   (λ (all one)
                     (let ([code (string->ansi-code one options)])
                       (if code  (format "\e[~am" code) "")))))

